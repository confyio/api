FORMAT: 1A
HOST: https://api.confy.io

# confy

Authentication is compulsory to access all the API endpoints.

# Group Users

Users should be created through the web interface only.

## User [/user]

### Retrieve an User [GET]

Get authenticated user's profile.

+ Response 200 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "email": "johnsmith@gmail.com",
          "verified": true,
          "type": "user"
        }

### Create an User [POST]

Register an user. __Restricted to web interface__.

+ Request (application/json)

        {
          "username": "jsmith",
          "email": "johnsmith@gmail.com",
          "password": "secret"
        }

+ Response 201 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "email": "johnsmith@gmail.com",
          "verified": false,
          "type": "user"
        }

### Update an User [PATCH]

Update the authenticated user's profile. An __email__ is the only thing which can be updated.

+ Request (application/json)

        {
          "email": "john.smith@gmail.com"
        }

+ Response 200 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "email": "john.smith@gmail.com",
          "verified": false,
          "type": "user"
        }

# Group Organizations

Organizations are owned by users and only (s)he can add/remove teams and projects for that organization. A default organization will be created for every user.

## Organizations [/orgs]

### List Organizations [GET]

List all organizations the authenticated user is a member of.

+ Response 200 (application/json)

        [{
          "_id": "orgs/bigcompany",
          "name": "BigCompany",
          "owner": "bobmarley",
          "email": "contact@bigcompany.com",
          "plan": "silver",
          "type": "org"
        }, {
          "_id": "orgs/mystartup",
          "name": "MyStartup",
          "owner": "jsmith",
          "email": "johnsmith@gmail.com",
          "plan": "bronze",
          "type": "org"
        }, {
          "_id": "orgs/jsmith",
          "name": "jsmith",
          "owner": "jsmith",
          "email": "johnsmith@gmail.com",
          "plan": "personal",
          "type": "org"
        }]

### Create an Organization [POST]

Create an organization with a name and the email for billing. _You have to use web interface to select a billing plan afterwards_.

+ Request (application/json)

        {
          "name": "OpenSourceProject"
          "email": "admin@opensourceproject.com",
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/opensourceproject",
          "name": "OpenSourceProject",
          "owner": "jsmith",
          "email": "admin@opensourceproject.com",
          "plan": "none",
          "type": "org"
        }

## Organization [/orgs/{org}]

+ Parameters

    + org (required, string) ... Name of the organization

### Retrieve an Organization [GET]

Get the organization specified by the given name if the authenticated user is a member.

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany",
          "name": "BigCompany",
          "owner": "bobmarley",
          "email": "contact@bigcompany.com",
          "plan": "silver",
          "type": "org"
        }

### Update an Organization [PATCH]

Update the given organization if the authenticated user is the owner. An __email__ is the only thing which can be updated.

+ Request (application/json)

        {
          "email": "john.smith@gmail.com"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/mystartup",
          "name": "MyStartup",
          "owner": "jsmith",
          "email": "john.smith@gmail.com",
          "plan": "personal",
          "type": "org"
        }

### Delete an Organization [DELETE]

Delete the given organization if the authenticated user is the owner. Cannot delete the default organization. __Restricted to web interface__.

+ Response 204

## Billing [/orgs/{org}/billing]

Authenticated user needs to be the owner of the organization.

+ Parameters

    + org (required, string) ... Name of the organization

### Subscribe to a Plan [POST]

Subscribe the organization to a plan. This can also be used when upgrading or downgrading a plan. __Only used by stripe checkout__. Confy will update the stripe customer if he already exists.

+ Request (application/json)

        {
          "stripeToken": "tok_3phltsyDWXUAUt",
          "plan": "gold"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/mystartup",
          "name": "MyStartup",
          "owner": "jsmith",
          "email": "john.smith@gmail.com",
          "plan": "gold"
        }

# Group Teams

Every organization will have a default team named __All__. Owner of the organization will be a default member for every team.

## Teams [/orgs/{org}/teams]

+ Parameters

    + org (required, string) ... Name of the organization

### List all Teams [GET]

List all teams of the given organization authenticated user is a member of. All the teams if authenticated user is the owner of the organization.

+ Response 200 (application/json)

        [{
          "_id": "orgs/bigcompany/teams/engineering",
          "name": "Engineering",
          "description": "The engineering guys",
          "users": ["bobmarley", "jenny", "laura", "jsmith"],
          "org": "bigcompany",
          "type": "team"
        }, {
          "_id": "orgs/bigcompany/teams/sideprojects",
          "name": "SideProjects",
          "description": "Team managing side projects",
          "users": ["bobmarley", "jsmith", "willy"],
          "org": "bigcompany",
          "type": "team"
        }]

### Create a Team [POST]

Create a team for the given organization. __You will have to add a team member afterwards__. Only authenticated user is allowed.

+ Request (application/json)

        {
          "name": "Consultants",
          "description": "Consultants will have restricted access"
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will have restricted access",
          "users": ["bobmarley"],
          "org": "bigcompany",
          "type": "team"
        }

## Team [/orgs/{org}/teams/{team}]

+ Parameters

    + org (required, string) ... Name of the organization
    + team (required, string) ... Name of the team

### Retrieve a Team [GET]

Get a specific team in a specific organization. Access only if the authenticated user is a member of the team or the owner of the org.

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/teams/sideprojects",
          "name": "SideProjects",
          "description": "Team managing side projects",
          "users": ["bobmarley", "jsmith", "willy"],
          "org": "bigcompany",
          "type": "team"
        }

### Update a Team [PATCH]

Update a specific team. __Description__ is the only thing which can be updated. Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "description": "Consultants will be restricted"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric"],
          "org": "bigcompany",
          "type": "team"
        }

### Delete a Team [DELETE]

Delete the given team. Cannot delete the default team in the organization. Authenticated user should be the owner of the organization.

+ Response 204

## Members [/orgs/{org}/teams/{team}/member]

Authenticated user should be the owner of the organization.

+ Parameters

    + org (required, string) ... Name of the organization
    + team (required, string) ... Name of the team

### Add a Member [POST]

Add users to the given team. The __user__ in the request needs to be a string.

+ Request (application/json)

        {
          "user": "ben"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric", "ben"],
          "org": "bigcompany",
          "type": "team"
        }

### Remove a Member [DELETE]

Remove users from the given team. The __user__ in the request needs to be a string. Cannot delete the default member in a team.

+ Request (application/json)

        {
          "user": "ben"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric"],
          "org": "bigcompany",
          "type": "team"
        }

# Group Projects

Each project has __one__ configuration document which can have many keys and values.

## Projects [/orgs/{org}/projects]

+ Parameters

    + org (required, string) ... Name of the organization

### List all Projects [GET]

List all the projects of the organization which can be seen by the authenticated user.

+ Response 200 (application/json)

        [{
          "_id": "orgs/bigcompany/projects/urlshortener",
          "name": "UrlShortener",
          "description": "Service to be used by bots",
          "org": "bigcompany",
          "type": "project"
        }, {
          "_id": "orgs/bigcompany/projects/main",
          "name": "Main",
          "description": "Main product",
          "org": "bigcompany",
          "type": "project"
        }, {
          "_id": "orgs/bigcompany/projects/blog",
          "name": "Blog",
          "description": "Company's blog",
          "org": "bigcompany",
          "type": "project"
        }]

### Create a Project [POST]

Create a project. _Authenticated user should own the organization_. Only the __all__ team will be able to see the project initially.

+ Request (application/json)

        {
          "name": "KnowledgeBase",
          "description": "Wiki and FAQ for support"
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/bigcompany/projects/knowledgebase",
          "name": "KnowledgeBase",
          "description": "Wiki and FAQ for support",
          "teams": ["all"],
          "org": "bigcompany",
          "type": "project"
        }

## Project [/orgs/{org}/projects/{project}]

Authenticated user should own the organization for the below endpoints.

+ Parameters

    + org (required, string) ... Name of the organization
    + project (required, string) ... Name of the project

### Retrieve a Project [GET]

Get a specific project.

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/urlshortener",
          "name": "UrlShortener",
          "description": "Service to be used by bots",
          "teams": ["all", "engineering", "consultants"],
          "org": "bigcompany",
          "type": "project"
        }

### Update a Project [PATCH]

Update a specific project. __Description__ is the only thing which can be updated.

+ Request (application/json)

        {
          "description": "Url shortening as a service"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/urlshortener",
          "name": "UrlShortener",
          "description": "Url shortening as a service",
          "teams": ["all", "engineering", "consultants"],
          "org": "bigcompany",
          "type": "project"
        }

### Delete a Project [DELETE]

Delete the given project.

+ Response 204

## Access [/orgs/{org}/projects/{project}/access]

+ Parameters

    + org (required, string) ... Name of the organization
    + project (required, string) ... Name of the project

### Add a Team [POST]

Give project access to the given teams. The __team__ in the request needs to be a string.

+ Request (application/json)

        {
          "team": "engineering"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/knowledgebase",
          "name": "KnowledgeBase",
          "description": "Wiki and FAQ for support",
          "teams": ["all", "engineering"],
          "org": "bigcompany",
          "type": "project"
        }

### Remove a Team [DELETE]

Remove project access for the given team. The __team__ in the request needs to be a string.

+ Request (application/json)

        {
          "team": "consultants"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/urlshortener",
          "name": "UrlShortener",
          "description": "Url shortening as a service",
          "teams": ["all", "engineering"],
          "org": "bigcompany",
          "type": "project"
        }

## Configuration [/orgs/{org}/projects/{project}/config]

Any member of the team which has access to the project can retrieve the configuration document or edit it.

+ Parameters

    + org (required, string) ... Name of the organization
    + project (required, string) ... Name of the project

### Retrieve the configuration [GET]

Get the configuration document for the project.

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/blog/config",
          "port": 3000,
          "random": [1, 2, 3],
          "database": {
            "host": "http://couchvendor.com/bigcompany",
            "port": 5984,
            "name": "blog"
          }
        }

### Update the configuration [PATCH]

Update the configuration document for the project. We will patch the document recursively.

+ Request (application/json)

        {
          "database": {
            "port": 6984
          },
          "random": null
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/projects/blog/config",
          "port": 3000,
          "database": {
            "host": "http://couchvendor.com/bigcompany",
            "port": 6984,
            "name": "blog"
          }
        }
