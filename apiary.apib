FORMAT: 1A
HOST: https://api.confy.io

# Confy

Authentication is compulsory to access almost all of the API endpoints.

# Group Users

Users should be created through the web interface only.

## User [/user]

### Retrieve an User [GET]

Get authenticated user's profile.

+ Response 200 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "fullname": "John Smith",
          "email": "johnsmith@gmail.com",
          "verified": true,
          "type": "user"
        }

### Create an User [POST]

Register an user.

+ Request (application/json)

        {
          "username": "jsmith",
          "fullname": "John Smith",
          "email": "johnsmith@gmail.com",
          "password": "secret",
          "news": true
        }

+ Response 201 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "fullname": "John Smith",
          "email": "johnsmith@gmail.com",
          "verified": false,
          "type": "user"
        }

### Update an User [PATCH]

Update the authenticated user's profile. _Cannot update passwords yet_. Should use basic authentication.

+ Request (application/json)

        {
          "fullname": "John Kay Smith",
          "email": "john.smith@gmail.com"
        }

+ Response 200 (application/json)

        {
          "_id": "users/jsmith",
          "username": "jsmith",
          "fullname": "John kay Smith",
          "email": "john.smith@gmail.com",
          "verified": false,
          "type": "user"
        }

# Group Organizations

Organizations are owned by users and only (s)he can add/remove teams and projects for that organization. A default organization will be created for every user.

## Organizations [/orgs]

### List Organizations [GET]

List all organizations the authenticated user is a member of.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company",
          "name": "Big Company",
          "owner": "bobmarley",
          "email": "contact@bigcompany.com",
          "plan": "silver",
          "type": "org"
        }, {
          "_id": "orgs/my-startup",
          "name": "My Startup",
          "owner": "jsmith",
          "email": "johnsmith@gmail.com",
          "plan": "bronze",
          "type": "org"
        }, {
          "_id": "orgs/jsmith",
          "name": "John Smith",
          "owner": "jsmith",
          "email": "johnsmith@gmail.com",
          "plan": "personal",
          "type": "org"
        }]

### Create an Organization [POST]

Create an organization with a name and the email for billing. _You have to use web interface to select a billing plan afterwards_.

+ Request (application/json)

        {
          "name": "Open Source Project",
          "email": "admin@opensourceproject.com",
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/open-source-project",
          "name": "Open Source Project",
          "owner": "jsmith",
          "email": "admin@opensourceproject.com",
          "plan": "none",
          "type": "org"
        }

## Organization [/orgs/{org}]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization

### Retrieve an Organization [GET]

Get the organization specified by the given slug if the authenticated user is a member.

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company",
          "name": "Big Company",
          "owner": "bobmarley",
          "email": "contact@bigcompany.com",
          "plan": "silver",
          "type": "org"
        }

### Update an Organization [PATCH]

Update the given organization if the authenticated user is the owner. __Email__ is the only thing which can be updated.

+ Request (application/json)

        {
          "email": "john.smith@gmail.com"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/my-startup",
          "name": "My Startup",
          "owner": "jsmith",
          "email": "john.smith@gmail.com",
          "plan": "personal",
          "type": "org"
        }

### Delete an Organization [DELETE]

Delete the given organization if the authenticated user is the owner. Cannot delete the default organization.

+ Response 204

## Billing [/orgs/{org}/billing]

Authenticated user needs to be the owner of the organization.

+ Parameters

    + org (required, string, `my-startup`) ... Slug of the organization

### Subscribe to a Plan [POST]

Subscribe the organization to a plan. This can also be used when upgrading or downgrading a plan. __Only used by stripe checkout__. Confy will update the stripe customer if he already exists.

+ Request (application/json)

        {
          "stripeToken": "tok_3phltsyDWXUAUt",
          "plan": "gold"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/my-startup",
          "name": "My Startup",
          "owner": "jsmith",
          "email": "john.smith@gmail.com",
          "plan": "gold",
          "type": "org"
        }

# Group Teams

Every organization will have a default team named __Owners__. Owner of the organization will be a default member for every team.

## Teams [/orgs/{org}/teams]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization

### List Teams [GET]

List teams of the given organization authenticated user is a member of.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company/teams/engineering",
          "name": "Engineering",
          "description": "The engineering guys",
          "users": ["bobmarley", "jenny", "laura", "jsmith"],
          "org": "big-company",
          "type": "team"
        }, {
          "_id": "orgs/big-company/teams/side-projects",
          "name": "Side Projects",
          "description": "Team managing side projects",
          "users": ["bobmarley", "jsmith", "willy"],
          "org": "big-company",
          "type": "team"
        }]

### Create a Team [POST]

Create a team for the given organization. __You will have to add a team member afterwards__. Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "name": "Consultants",
          "description": "Consultants will have restricted access"
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will have restricted access",
          "users": ["bobmarley"],
          "org": "big-company",
          "type": "team"
        }

## Team [/orgs/{org}/teams/{team}]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + team (required, string, `consultants`) ... Slug of the team

### Retrieve a Team [GET]

Get a specific team in a specific organization. Access only if the authenticated user is a member of the team or the owner of the org.

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will have restricted access",
          "users": ["bobmarley", "eric"],
          "org": "big-company",
          "type": "team"
        }

### Update a Team [PATCH]

Update a specific team. __Description__ is the only thing which can be updated. Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "description": "Consultants will be restricted"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/bigcompany/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric"],
          "org": "bigcompany",
          "type": "team"
        }

### Delete a Team [DELETE]

Delete the given team. Cannot delete the default team in the organization. Authenticated user should be the owner of the organization.

+ Response 204

## Projects [/orgs/{org}/teams/{team}/projects]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + team (required, string, `engineering`) ... Slug of the team

### List Projects [GET]

List projects of the organization the given team has access to. Access only if the authenticated user is a member of the team or the owner of the org.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company/projects/main",
          "name": "Main",
          "description": "Main product",
          "teams": ["owners", "engineering"],
          "org": "big-company",
          "type": "project"
        }, {
          "_id": "orgs/big-company/projects/blog",
          "name": "Blog",
          "description": "Company's blog",
          "teams": ["owners", "engineering"],
          "org": "big-company",
          "type": "project"
        }]

## Members [/orgs/{org}/teams/{team}/member]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + team (required, string, `consultants`) ... Slug of the team

### List Members [GET]

List all the members in the given team. Authenticated user should be a member of the team or the owner of the org.

+ Response 200 (application/json)

        [
          {
            "_id": "users/jsmith",
            "username": "jsmith",
            "fullname": "John Kay Smith",
            "email": "johnsmith@gmail.com",
            "verified": true,
            "type": "user"
          }
        ]

### Add a Member [POST]

Add the user to the given team. The __user__ in the request needs to be a string and be the username of a valid user.  The Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "user": "ben"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric", "ben"],
          "org": "big-company",
          "type": "team"
        }

### Remove a Member [DELETE]

Remove users from the given team. The __user__ in the request needs to be a string and be the username of a valid user. Cannot delete the default member in a team.  The Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "user": "ben"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/teams/consultants",
          "name": "Consultants",
          "description": "Consultants will be restricted",
          "users": ["bobmarley", "eric"],
          "org": "big-company",
          "type": "team"
        }

# Group Projects

An organization can contain any number of projects.

## Projects [/orgs/{org}/projects]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization

### List all Projects [GET]

List all the projects of the organization which can be accessed by the authenticated user.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company/projects/url-shortener",
          "name": "Url Shortener",
          "description": "Service to be used by bots",
          "teams": ["owners", "sideprojects"],
          "org": "big-company",
          "type": "project"
        }, {
          "_id": "orgs/big-company/projects/main",
          "name": "Main",
          "description": "Main product",
          "teams": ["owners", "engineering"],
          "org": "big-company",
          "type": "project"
        }, {
          "_id": "orgs/big-company/projects/blog",
          "name": "Blog",
          "description": "Company's blog",
          "teams": ["owners", "engineering"],
          "org": "big-company",
          "type": "project"
        }]

### Create a Project [POST]

Create a project if the authenticated user is the owner of the organization. Only the __owners__ team will be able to see the project initially.

+ Request (application/json)

        {
          "name": "Knowledge Base",
          "description": "Wiki and FAQ for support"
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/big-company/projects/knowledge-base",
          "name": "Knowledge Base",
          "description": "Wiki and FAQ for support",
          "teams": ["owners"],
          "org": "big-company",
          "type": "project"
        }

## Project [/orgs/{org}/projects/{project}]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + project (required, string, `url-shortener`) ... Slug of the project

### Retrieve a Project [GET]

Get a specific project in a specific organization. Works only if the authenticated user has access to the project.

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/url-shortener",
          "name": "Url Shortener",
          "description": "Service to be used by bots",
          "teams": ["owners", "side-projects"],
          "org": "big-company",
          "type": "project"
        }

### Update a Project [PATCH]

Update a specific project. __Description__ is the only thing which can be updated. Authenticated user should be the owner of the organization.

+ Request (application/json)

        {
          "description": "Url shortening as a service"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/url-shortener",
          "name": "Url Shortener",
          "description": "Url shortening as a service",
          "teams": ["owners", "side-projects"],
          "org": "big-company",
          "type": "project"
        }

### Delete a Project [DELETE]

Delete the given project. Authenticated user should be the owner of the organization.

+ Response 204

## Access [/orgs/{org}/projects/{project}/access]

Default team __Owners__ will have access to every project.

+ Parameters

    + org (required, string) ... Name of the organization
    + project (required, string) ... Name of the project

### List Teams [GET]

Retrieve a list of teams which have access to the given project. Authenticated user should be a member of the team.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company/teams/engineering",
          "name": "Engineering",
          "description": "The engineering guys",
          "users": ["bobmarley", "jenny", "laura", "jsmith"],
          "org": "big-company",
          "type": "team"
        }, {
          "_id": "orgs/big-company/teams/side-projects",
          "name": "Side Projects",
          "description": "Team managing side projects",
          "users": ["bobmarley", "jsmith", "willy"],
          "org": "big-company",
          "type": "team"
        }]

### Add a Team [POST]

Give the team access to the given project. The __team__ in the request needs to be a string and should be the name of a valid team. Authenticated user should be the owner of the organization for the below endpoints.

+ Request (application/json)

        {
          "team": "Engineering"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/knowledge-base",
          "name": "Knowledge Base",
          "description": "Wiki and FAQ for support",
          "teams": ["owners", "engineering"],
          "org": "big-company",
          "type": "project"
        }

### Remove a Team [DELETE]

Remove project access for the given team. The __team__ in the request needs to be a string and should be the name of a valid team. Can't delete default team's access. Authenticated user should be the owner of the organization for the below endpoints.

+ Request (application/json)

        {
          "team": "Side Projects"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/url-shortener",
          "name": "Url Shortener",
          "description": "Url shortening as a service",
          "teams": ["owners"],
          "org": "big-company",
          "type": "project"
        }

# Group Environments

Every project has a default environment named __Production__. Each environment has __one__ credential document which can have many keys and values.

## Environments [/orgs/{org}/projects/{project}/envs]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + project (required, string, `main`) ... Slug of the project

### List all Environments [GET]

List all the environmens of the project. The authenticated user should have access to the project.

+ Response 200 (application/json)

        [{
          "_id": "orgs/big-company/projects/main/envs/production",
          "name": "Production",
          "description": "Production environment",
          "org": "big-company",
          "project": "main",
          "type": "env"
        }, {
          "_id": "orgs/big-company/projects/main/envs/staging",
          "name": "Staging",
          "description": "Office staging",
          "org": "big-company",
          "project": "main",
          "type": "env"
        }]

### Create an Environment [POST]

Create an environment. The authenticated user should have access to the project.

+ Request (application/json)

        {
          "name": "Quality Assurance",
          "description": "Quality Assurance guys server"
        }

+ Response 201 (application/json)

        {
          "_id": "orgs/big-company/projects/main/envs/quality-assurance",
          "name": "Quality Assurance",
          "description": "Quality Assurance guys server"
          "org": "big-company",
          "project": "main",
          "type": "env"
        }

## Environment [/orgs/{org}/projects/{project}/envs/{env}]

+ Parameters

    + org (required, string, `big-company`) ... Slug of the organization
    + project (required, string, `main`) ... Slug of the project
    + env (required, string, `quality-assurance`) ... Slug of the environment

### Retrieve an Environment [GET]

Get a specific environment in a specific project. The authenticated user should have access to the project.

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/main/envs/quality-assurance",
          "name": "Quality Assurance",
          "description": "Quality Assurance guys server"
          "org": "big-company",
          "project": "main",
          "type": "env"
        }

### Update an Environment [PATCH]

Update a specific environment. __Description__ is the only thing which can be updated. Authenticated user should have access to the project.

+ Request (application/json)

        {
          "description": "The quality assurance testing server"
        }

+ Response 200 (application/json)

        {
          "_id": "orgs/big-company/projects/main/envs/quality-assurance",
          "name": "Quality Assurance",
          "description": "The quality assurance testing server"
          "org": "big-company",
          "project": "main",
          "type": "env"
        }

### Delete an Environment [DELETE]

Delete the given environment of the project. Authenticated user should have access to the project. Cannot delete the default environment.

+ Response 204

## Credentials [/orgs/{org}/projects/{project}/envs/{env}/config]

Any member of the team which has access to the project can retrieve any of it's environment's credential document or edit it.

+ Parameters

    + org (required, string, `big-company`) ... Name of the organization
    + project (required, string, `main`) ... Name of the project
    + env (required, string, `production`) ... Name of the environment

### Retrieve the credentials [GET]

Get the credential document for the given environment of the project.

+ Response 200 (application/json)

        {
          "port": 3000,
          "random": [1, 2, 3],
          "database": {
            "host": "http://couchvendor.com/bigcompany",
            "port": 5984,
            "name": "blog"
          }
        }

### Update the credentials [PUT]

Update the credential document for the given environment of the project. Replaces the whole document with the given body.

+ Request (application/json)

        {
          "port": 3000,
          "database": {
            "host": "http://couchvendor.com/bigcompany",
            "port": 6984,
            "name": "blog"
          },
          "random": null
        }

+ Response 200 (application/json)

        {
          "port": 3000,
          "database": {
            "host": "http://couchvendor.com/bigcompany",
            "port": 6984,
            "name": "blog"
          },
          "random": null
        }

## Versioning [/orgs/{org}/projects/{project}/envs/{env}/versions]

We store the last 10 versions of an environment credentials which can be used by the user to restore an old version of the credential document. Authenticated user should have access to the project.

+ Parameters

    + org (required, string, `big-company`) ... Name of the organization
    + project (required, string, `main`) ... Name of the project
    + env (required, string, `production`) ... Name of the environment

### List all Versions [GET]

List all versions of the credential document.

+ Response 200 (application/json)

        [{
          "config": {
            "port": 8000,
            "database": {
              "port": 5984,
              "url": "http://db.confy.io",
              "name": "support"
            }
          },
          "time": 1427633285584
        }, {
          "config": "EWcdL4M3UHUsdpYZKZTnYQ==RDsiGWvifNeWqrLKz9MDRQ==",
          "time": 1427638419608
        }]
